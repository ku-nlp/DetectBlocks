# $Id$

- 必要なモジュール
 -- HTML::Treebuilder


- プログラム
 -- サンプルプログラム : scripts/test.pl
 -- Usage : perl -I../perl test.pl htmlfile URL
    (* htmlfileはutf8にencodeしたもの)
    (* URLは指定しなくてもよい)

 -- オプション
   * -add_class2html       : 領域情報を付与したものをhtml形式で出力
   * -add_blockname2alltag : ROOTタグだけでなく全てのタグに領域情報を付与
   * -get_more_block       : profile, address領域も付与
   * -print_offset         : 領域名とそのoffsetを出力
   * -juman jumanpath      : jumanのpathを指定(例 : -juman /home/funayama/tool/bin/juman)
			   : 指定しない場合はデフォルトのjumanを使う
                           : 京大の計算機環境で動かす際には'kyoto_u'とすることで32/64bitの判定を自動的に行う
   * -without_juman        : jumanを使わない(高速、精度低?)


- とりうる領域名
 -- デフォルト
   * myblocktype : header, footer, link, img, form, maintext, unknown_block

 -- get_more_blockオプションをつけた場合
   * myblocktype : デフォルトと同じ
   * myblocktype_more : profile, address


- ★注意★
 -- 何度もdetectblocksを呼び出して構造解析を行う場合、treeの情報をメモリから削除する必要がある

    (例)

     my $DetectBlocks = new DetectBlocks(\%opt);
     $DetectBlocks->maketree($html_string, $url);
     $DetectBlocks->detectblocks; # 構造解析を行う

       :
       (構造解析結果を用いた処理)
       :

     # ★以下を定期的(例えば1文書ごと)に行う必要がある(script/test.plも参照)★
     $DetectBlocks->{tree}->delete;

- CGI (領域名に色をつけて表示 + 発信者候補を表示)
   !! DetectSender, NEの設定を行わないと動きません.
      そちらのREADMEも合わせてご覧ください

 -- cgi/index.cgi, cgi/style.cssをpublic_html以下の同一ディレクトリにコピー
    
 -- 上と同じディレクトリにanalysis_result, logというディレクトリを作る

 -- 以下をcvsでcheckout
   - NE
     CVS_RSH=ssh cvs -d reed:/share/service/cvs co NE
   - Utils
     CVS_RSH=ssh cvs -d reed:/share/service/cvs co Utils
   - DetectSender
     CVS_RSH=ssh cvs -d reed:/share/service/cvs co NE

 -- index.cgi  以下を書き換える
   - $DetectSender_default : DetectSenderをcheckoutしたディレクトリ
   - $DetectBlocks_default : DetectBlocksをcheckoutしたディレクトリ
   - $NE_default           : NEをcheckoutしたディレクトリ
   - $Utils_default        : Utilsをcheckoutしたディレクトリ
